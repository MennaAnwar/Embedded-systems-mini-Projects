
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000156  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000156  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000602  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000058b  00000000  00000000  000007f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000021f  00000000  00000000  00000d81  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  00000fa0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000032d  00000000  00000000  00000ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  00001325  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000136e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  74:	0c 94 6f 00 	jmp	0xde	; 0xde <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_9>:
#define NUMBER_OF_OVERFLOWS_PER_HALF_SECOND 2

unsigned char g_tick = 0;

ISR(TIMER0_OVF_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
	g_tick++;
  8a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  8e:	8f 5f       	subi	r24, 0xFF	; 255
  90:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if(g_tick == NUMBER_OF_OVERFLOWS_PER_HALF_SECOND)
  94:	82 30       	cpi	r24, 0x02	; 2
  96:	31 f4       	brne	.+12     	; 0xa4 <__vector_9+0x28>
	{
		PORTC = PORTC ^ (1<<PC0); //toggle led every 0.5 second
  98:	95 b3       	in	r25, 0x15	; 21
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	89 27       	eor	r24, r25
  9e:	85 bb       	out	0x15, r24	; 21
		g_tick = 0; //clear the tick counter again to count a new 0.5 second
  a0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	}

	TIFR |= (1<<0);
  a4:	88 b7       	in	r24, 0x38	; 56
  a6:	81 60       	ori	r24, 0x01	; 1
  a8:	88 bf       	out	0x38, r24	; 56
}
  aa:	9f 91       	pop	r25
  ac:	8f 91       	pop	r24
  ae:	0f 90       	pop	r0
  b0:	0f be       	out	0x3f, r0	; 63
  b2:	0f 90       	pop	r0
  b4:	1f 90       	pop	r1
  b6:	18 95       	reti

000000b8 <timer0_init_normal_mode>:

void timer0_init_normal_mode(void)
{
	TCNT0 = 0; //timer initial value
  b8:	12 be       	out	0x32, r1	; 50
	TIMSK |= (1<<TOIE0); //enable overflow interrupt
  ba:	89 b7       	in	r24, 0x39	; 57
  bc:	81 60       	ori	r24, 0x01	; 1
  be:	89 bf       	out	0x39, r24	; 57
	 * 1. Non PWM mode FOC0=1
	 * 2. Normal Mode WGM01=0 & WGM00=0
	 * 3. Normal Mode COM00=0 & COM01=0 
	 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
	 */
	TCCR0 = (1<<FOC0) | (1<<CS02) | (1<<CS00);
  c0:	85 e8       	ldi	r24, 0x85	; 133
  c2:	83 bf       	out	0x33, r24	; 51
  c4:	08 95       	ret

000000c6 <main>:
}

int main(void)
{
	DDRC  |= (1<<PC0); //configure the led pin to be output pin.
  c6:	84 b3       	in	r24, 0x14	; 20
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	84 bb       	out	0x14, r24	; 20
	PORTC &= ~(1<<PC0); //LED is off at the beginning(Positive Logic).
  cc:	85 b3       	in	r24, 0x15	; 21
  ce:	8e 7f       	andi	r24, 0xFE	; 254
  d0:	85 bb       	out	0x15, r24	; 21
	SREG  |= (1<<7); //enable global interrupts in MC by setting the I-Bit.
  d2:	8f b7       	in	r24, 0x3f	; 63
  d4:	80 68       	ori	r24, 0x80	; 128
  d6:	8f bf       	out	0x3f, r24	; 63
	timer0_init_normal_mode(); //start the timer.
  d8:	0e 94 5c 00 	call	0xb8	; 0xb8 <timer0_init_normal_mode>
  dc:	ff cf       	rjmp	.-2      	; 0xdc <main+0x16>

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
