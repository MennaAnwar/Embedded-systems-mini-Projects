
ex2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000001b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000716  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000602  00000000  00000000  00000966  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000305  00000000  00000000  00000f68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001270  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000355  00000000  00000000  000012c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000151  00000000  00000000  00001619  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000176a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  74:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_2>:

unsigned char g_Interrupt_Flag = 0;

/* External INT1 Interrupt Service Routine */
ISR(INT1_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
	g_Interrupt_Flag = 1;
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
}
  8e:	8f 91       	pop	r24
  90:	0f 90       	pop	r0
  92:	0f be       	out	0x3f, r0	; 63
  94:	0f 90       	pop	r0
  96:	1f 90       	pop	r1
  98:	18 95       	reti

0000009a <INT1_Init>:

/* External INT1 enable and configuration function */
void INT1_Init(void)
{
	SREG  &= ~(1<<7);      // Disable interrupts by clearing I-bit
  9a:	8f b7       	in	r24, 0x3f	; 63
  9c:	8f 77       	andi	r24, 0x7F	; 127
  9e:	8f bf       	out	0x3f, r24	; 63
	DDRD  &= (~(1<<PD3));  // Configure INT1/PD3 as input pin
  a0:	81 b3       	in	r24, 0x11	; 17
  a2:	87 7f       	andi	r24, 0xF7	; 247
  a4:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1<<PD3);     // Enable the internal pull up resistor at PD3 pin
  a6:	82 b3       	in	r24, 0x12	; 18
  a8:	88 60       	ori	r24, 0x08	; 8
  aa:	82 bb       	out	0x12, r24	; 18
	GICR  |= (1<<INT1);    // Enable external interrupt pin INT1
  ac:	8b b7       	in	r24, 0x3b	; 59
  ae:	80 68       	ori	r24, 0x80	; 128
  b0:	8b bf       	out	0x3b, r24	; 59
	// Trigger INT1 with the falling edge
	MCUCR |= (1<<ISC11);
  b2:	85 b7       	in	r24, 0x35	; 53
  b4:	88 60       	ori	r24, 0x08	; 8
  b6:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1<<ISC10);
  b8:	85 b7       	in	r24, 0x35	; 53
  ba:	8b 7f       	andi	r24, 0xFB	; 251
  bc:	85 bf       	out	0x35, r24	; 53
	SREG  |= (1<<7);       // Enable interrupts by setting I-bit
  be:	8f b7       	in	r24, 0x3f	; 63
  c0:	80 68       	ori	r24, 0x80	; 128
  c2:	8f bf       	out	0x3f, r24	; 63
  c4:	08 95       	ret

000000c6 <main>:
}

int main(void)
{
	INT1_Init();           // Enable and configure external INT1
  c6:	0e 94 4d 00 	call	0x9a	; 0x9a <INT1_Init>

	DDRC  = 0xFF;          // Configure all PORTC pins as output pins
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x01;          // First led is on at the beginning (Positive Logic configuration)
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	85 bb       	out	0x15, r24	; 21

	unsigned char Loop_idx;
	unsigned char number = 1;
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <main+0x12>
			_delay_ms(500);
			PORTC = number; //every time only one led is ON
			number <<= 1;
			if(number == 0)
			{
				number = 0x01;
  d6:	21 e0       	ldi	r18, 0x01	; 1
	unsigned char Loop_idx;
	unsigned char number = 1;

	while(1)
	{
		if(g_Interrupt_Flag == 0)
  d8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  dc:	81 11       	cpse	r24, r1
  de:	0d c0       	rjmp	.+26     	; 0xfa <main+0x34>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	3f e9       	ldi	r19, 0x9F	; 159
  e2:	46 e8       	ldi	r20, 0x86	; 134
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	31 50       	subi	r19, 0x01	; 1
  e8:	40 40       	sbci	r20, 0x00	; 0
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x20>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x2a>
  f0:	00 00       	nop
		{
			_delay_ms(500);
			PORTC = number; //every time only one led is ON
  f2:	25 bb       	out	0x15, r18	; 21
			number <<= 1;
  f4:	22 0f       	add	r18, r18
			if(number == 0)
  f6:	79 f3       	breq	.-34     	; 0xd6 <main+0x10>
  f8:	ef cf       	rjmp	.-34     	; 0xd8 <main+0x12>
			{
				number = 0x01;
			}
		}
		else if(g_Interrupt_Flag == 1)
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	69 f7       	brne	.-38     	; 0xd8 <main+0x12>
  fe:	17 c0       	rjmp	.+46     	; 0x12e <main+0x68>
		{
			for(Loop_idx = 0 ; Loop_idx < 5 ; Loop_idx++)
			{
				PORTC = 0xFF;
 100:	9f ef       	ldi	r25, 0xFF	; 255
 102:	95 bb       	out	0x15, r25	; 21
 104:	9f e9       	ldi	r25, 0x9F	; 159
 106:	36 e8       	ldi	r19, 0x86	; 134
 108:	41 e0       	ldi	r20, 0x01	; 1
 10a:	91 50       	subi	r25, 0x01	; 1
 10c:	30 40       	sbci	r19, 0x00	; 0
 10e:	40 40       	sbci	r20, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <main+0x44>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x4e>
 114:	00 00       	nop
				_delay_ms(500);
				PORTC = 0x00;
 116:	15 ba       	out	0x15, r1	; 21
 118:	9f e9       	ldi	r25, 0x9F	; 159
 11a:	36 e8       	ldi	r19, 0x86	; 134
 11c:	41 e0       	ldi	r20, 0x01	; 1
 11e:	91 50       	subi	r25, 0x01	; 1
 120:	30 40       	sbci	r19, 0x00	; 0
 122:	40 40       	sbci	r20, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <main+0x58>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0x62>
 128:	00 00       	nop
				number = 0x01;
			}
		}
		else if(g_Interrupt_Flag == 1)
		{
			for(Loop_idx = 0 ; Loop_idx < 5 ; Loop_idx++)
 12a:	8f 5f       	subi	r24, 0xFF	; 255
 12c:	01 c0       	rjmp	.+2      	; 0x130 <main+0x6a>
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	85 30       	cpi	r24, 0x05	; 5
 132:	30 f3       	brcs	.-52     	; 0x100 <main+0x3a>
				PORTC = 0xFF;
				_delay_ms(500);
				PORTC = 0x00;
				_delay_ms(500);
			}
			g_Interrupt_Flag = 0; //after finish make flag = 0 again
 134:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 138:	cf cf       	rjmp	.-98     	; 0xd8 <main+0x12>

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
