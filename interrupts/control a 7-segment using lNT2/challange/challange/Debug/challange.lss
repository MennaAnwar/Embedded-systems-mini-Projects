
challange.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000016a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000016a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000602  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000058b  00000000  00000000  0000080a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000225  00000000  00000000  00000d95  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  00000fbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000302  00000000  00000000  00001014  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  00001316  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000135f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_18>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  74:	0c 94 79 00 	jmp	0xf2	; 0xf2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_18>:
/* global variable contain the 7-seg count value */
unsigned char g_num = 0;

/* External INT2 Interrupt Service Routine */
ISR(INT2_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
	if((PORTC & 0x0F) == 9)
  8a:	85 b3       	in	r24, 0x15	; 21
  8c:	8f 70       	andi	r24, 0x0F	; 15
  8e:	89 30       	cpi	r24, 0x09	; 9
  90:	31 f4       	brne	.+12     	; 0x9e <__vector_18+0x22>
	{
		// if overflow occurs return to ZERO.
		g_num = 0;
  92:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		PORTC = (PORTC & 0xF0) | (g_num & 0x0F);
  96:	85 b3       	in	r24, 0x15	; 21
  98:	80 7f       	andi	r24, 0xF0	; 240
  9a:	85 bb       	out	0x15, r24	; 21
  9c:	0a c0       	rjmp	.+20     	; 0xb2 <__vector_18+0x36>
	}
	else
	{
		// increment 7-segment every interrupt
		g_num++;
  9e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  a2:	8f 5f       	subi	r24, 0xFF	; 255
  a4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		PORTC = (PORTC & 0xF0) | (g_num & 0x0F);
  a8:	95 b3       	in	r25, 0x15	; 21
  aa:	90 7f       	andi	r25, 0xF0	; 240
  ac:	8f 70       	andi	r24, 0x0F	; 15
  ae:	89 2b       	or	r24, r25
  b0:	85 bb       	out	0x15, r24	; 21
	}
}
  b2:	9f 91       	pop	r25
  b4:	8f 91       	pop	r24
  b6:	0f 90       	pop	r0
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	0f 90       	pop	r0
  bc:	1f 90       	pop	r1
  be:	18 95       	reti

000000c0 <INT2_Init>:

/* External INT2 enable and configuration function */
void INT2_Init(void)
{
	SREG   &= ~(1<<7);      // Disable interrupts by clearing I-bit
  c0:	8f b7       	in	r24, 0x3f	; 63
  c2:	8f 77       	andi	r24, 0x7F	; 127
  c4:	8f bf       	out	0x3f, r24	; 63
	DDRB   &= (~(1<<PB2));   // Configure INT2/PB2 as input pin
  c6:	87 b3       	in	r24, 0x17	; 23
  c8:	8b 7f       	andi	r24, 0xFB	; 251
  ca:	87 bb       	out	0x17, r24	; 23
	GICR   |= (1<<INT2);	// Enable external interrupt pin INT2
  cc:	8b b7       	in	r24, 0x3b	; 59
  ce:	80 62       	ori	r24, 0x20	; 32
  d0:	8b bf       	out	0x3b, r24	; 59
	MCUCSR |= (1<<ISC2);    // Trigger INT2 with the raising edge
  d2:	84 b7       	in	r24, 0x34	; 52
  d4:	80 64       	ori	r24, 0x40	; 64
  d6:	84 bf       	out	0x34, r24	; 52
	SREG   |= (1<<7);       // Enable interrupts by setting I-bit
  d8:	8f b7       	in	r24, 0x3f	; 63
  da:	80 68       	ori	r24, 0x80	; 128
  dc:	8f bf       	out	0x3f, r24	; 63
  de:	08 95       	ret

000000e0 <main>:
}

int main(void)
{
	DDRC |= 0x0F; 			// Configure all pins in PORTC as output pins.
  e0:	84 b3       	in	r24, 0x14	; 20
  e2:	8f 60       	ori	r24, 0x0F	; 15
  e4:	84 bb       	out	0x14, r24	; 20
	PORTC &= 0xF0; 		    // Initialization 7-seg display zero at the beginning.
  e6:	85 b3       	in	r24, 0x15	; 21
  e8:	80 7f       	andi	r24, 0xF0	; 240
  ea:	85 bb       	out	0x15, r24	; 21
	
	INT2_Init(); 			// Enable and configure external INT2
  ec:	0e 94 60 00 	call	0xc0	; 0xc0 <INT2_Init>
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <main+0x10>

000000f2 <_exit>:
  f2:	f8 94       	cli

000000f4 <__stop_program>:
  f4:	ff cf       	rjmp	.-2      	; 0xf4 <__stop_program>
