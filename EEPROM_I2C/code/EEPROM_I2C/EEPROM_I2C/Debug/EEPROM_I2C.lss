
EEPROM_I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000005d6  0000064a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000654  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000684  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000120  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013a4  00000000  00000000  000007e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009c1  00000000  00000000  00001b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a54  00000000  00000000  00002545  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000220  00000000  00000000  00002f9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000541  00000000  00000000  000031bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008f0  00000000  00000000  000036fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  00003fed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	09 01       	movw	r0, r18
  56:	27 01       	movw	r4, r14
  58:	0b 01       	movw	r0, r22
  5a:	0d 01       	movw	r0, r26
  5c:	0f 01       	movw	r0, r30
  5e:	11 01       	movw	r2, r2
  60:	13 01       	movw	r2, r6
  62:	15 01       	movw	r2, r10
  64:	17 01       	movw	r2, r14
  66:	19 01       	movw	r2, r18
  68:	1b 01       	movw	r2, r22
  6a:	1d 01       	movw	r2, r26
  6c:	1f 01       	movw	r2, r30
  6e:	21 01       	movw	r4, r2
  70:	23 01       	movw	r4, r6
  72:	25 01       	movw	r4, r10

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf e5       	ldi	r28, 0x5F	; 95
  7a:	d4 e0       	ldi	r29, 0x04	; 4
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	10 e0       	ldi	r17, 0x00	; 0
  82:	a0 e6       	ldi	r26, 0x60	; 96
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e6 ed       	ldi	r30, 0xD6	; 214
  88:	f5 e0       	ldi	r31, 0x05	; 5
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	aa 36       	cpi	r26, 0x6A	; 106
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>
  96:	0e 94 4c 02 	call	0x498	; 0x498 <main>
  9a:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <EEPROM_init>:
#include "external_eeprom.h"

void EEPROM_init(void)
{
	/* just initialize the I2C(TWI) module inside the MC */
	TWI_init();
  a2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <TWI_init>
  a6:	08 95       	ret

000000a8 <EEPROM_writeByte>:
}

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	ec 01       	movw	r28, r24
  b0:	16 2f       	mov	r17, r22
	/* Send the Start Bit */
    TWI_start();
  b2:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <TWI_start>
    if (TWI_getStatus() != TW_START)
  b6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <TWI_getStatus>
  ba:	88 30       	cpi	r24, 0x08	; 8
  bc:	09 f5       	brne	.+66     	; 0x100 <EEPROM_writeByte+0x58>
        return ERROR;
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
  be:	ce 01       	movw	r24, r28
  c0:	88 27       	eor	r24, r24
  c2:	97 70       	andi	r25, 0x07	; 7
  c4:	88 0f       	add	r24, r24
  c6:	89 2f       	mov	r24, r25
  c8:	88 1f       	adc	r24, r24
  ca:	99 0b       	sbc	r25, r25
  cc:	91 95       	neg	r25
  ce:	80 6a       	ori	r24, 0xA0	; 160
  d0:	0e 94 ed 00 	call	0x1da	; 0x1da <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
  d4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <TWI_getStatus>
  d8:	88 31       	cpi	r24, 0x18	; 24
  da:	a1 f4       	brne	.+40     	; 0x104 <EEPROM_writeByte+0x5c>
        return ERROR; 
		 
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
  dc:	8c 2f       	mov	r24, r28
  de:	0e 94 ed 00 	call	0x1da	; 0x1da <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
  e2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <TWI_getStatus>
  e6:	88 32       	cpi	r24, 0x28	; 40
  e8:	79 f4       	brne	.+30     	; 0x108 <EEPROM_writeByte+0x60>
        return ERROR;
		
    /* write byte to eeprom */
    TWI_write(u8data);
  ea:	81 2f       	mov	r24, r17
  ec:	0e 94 ed 00 	call	0x1da	; 0x1da <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
  f0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <TWI_getStatus>
  f4:	88 32       	cpi	r24, 0x28	; 40
  f6:	51 f4       	brne	.+20     	; 0x10c <EEPROM_writeByte+0x64>
        return ERROR;

    /* Send the Stop Bit */
    TWI_stop();
  f8:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <TWI_stop>
	
    return SUCCESS;
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	07 c0       	rjmp	.+14     	; 0x10e <EEPROM_writeByte+0x66>
uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
	/* Send the Start Bit */
    TWI_start();
    if (TWI_getStatus() != TW_START)
        return ERROR;
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	05 c0       	rjmp	.+10     	; 0x10e <EEPROM_writeByte+0x66>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
        return ERROR; 
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	03 c0       	rjmp	.+6      	; 0x10e <EEPROM_writeByte+0x66>
		 
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    if (TWI_getStatus() != TW_MT_DATA_ACK)
        return ERROR;
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	01 c0       	rjmp	.+2      	; 0x10e <EEPROM_writeByte+0x66>
		
    /* write byte to eeprom */
    TWI_write(u8data);
    if (TWI_getStatus() != TW_MT_DATA_ACK)
        return ERROR;
 10c:	80 e0       	ldi	r24, 0x00	; 0

    /* Send the Stop Bit */
    TWI_stop();
	
    return SUCCESS;
}
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	1f 91       	pop	r17
 114:	08 95       	ret

00000116 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
 116:	ef 92       	push	r14
 118:	ff 92       	push	r15
 11a:	0f 93       	push	r16
 11c:	1f 93       	push	r17
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	ec 01       	movw	r28, r24
 124:	8b 01       	movw	r16, r22
	/* Send the Start Bit */
    TWI_start();
 126:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <TWI_start>
    if (TWI_getStatus() != TW_START)
 12a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <TWI_getStatus>
 12e:	88 30       	cpi	r24, 0x08	; 8
 130:	91 f5       	brne	.+100    	; 0x196 <EEPROM_readByte+0x80>
        return ERROR;
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
 132:	7e 01       	movw	r14, r28
 134:	ee 24       	eor	r14, r14
 136:	87 e0       	ldi	r24, 0x07	; 7
 138:	f8 22       	and	r15, r24
 13a:	ee 0c       	add	r14, r14
 13c:	ef 2c       	mov	r14, r15
 13e:	ee 1c       	adc	r14, r14
 140:	ff 08       	sbc	r15, r15
 142:	f1 94       	neg	r15
 144:	8e 2d       	mov	r24, r14
 146:	80 6a       	ori	r24, 0xA0	; 160
 148:	0e 94 ed 00 	call	0x1da	; 0x1da <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
 14c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <TWI_getStatus>
 150:	88 31       	cpi	r24, 0x18	; 24
 152:	19 f5       	brne	.+70     	; 0x19a <EEPROM_readByte+0x84>
        return ERROR;
		
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
 154:	8c 2f       	mov	r24, r28
 156:	0e 94 ed 00 	call	0x1da	; 0x1da <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
 15a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <TWI_getStatus>
 15e:	88 32       	cpi	r24, 0x28	; 40
 160:	f1 f4       	brne	.+60     	; 0x19e <EEPROM_readByte+0x88>
        return ERROR;
		
    /* Send the Repeated Start Bit */
    TWI_start();
 162:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
 166:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <TWI_getStatus>
 16a:	80 31       	cpi	r24, 0x10	; 16
 16c:	d1 f4       	brne	.+52     	; 0x1a2 <EEPROM_readByte+0x8c>
        return ERROR;
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
 16e:	8e 2d       	mov	r24, r14
 170:	81 6a       	ori	r24, 0xA1	; 161
 172:	0e 94 ed 00 	call	0x1da	; 0x1da <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
 176:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <TWI_getStatus>
 17a:	80 34       	cpi	r24, 0x40	; 64
 17c:	a1 f4       	brne	.+40     	; 0x1a6 <EEPROM_readByte+0x90>
        return ERROR;

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
 17e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <TWI_readWithNACK>
 182:	f8 01       	movw	r30, r16
 184:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
 186:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <TWI_getStatus>
 18a:	88 35       	cpi	r24, 0x58	; 88
 18c:	71 f4       	brne	.+28     	; 0x1aa <EEPROM_readByte+0x94>
        return ERROR;

    /* Send the Stop Bit */
    TWI_stop();
 18e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <TWI_stop>
    return SUCCESS;
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	0b c0       	rjmp	.+22     	; 0x1ac <EEPROM_readByte+0x96>
uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
	/* Send the Start Bit */
    TWI_start();
    if (TWI_getStatus() != TW_START)
        return ERROR;
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	09 c0       	rjmp	.+18     	; 0x1ac <EEPROM_readByte+0x96>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
        return ERROR;
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	07 c0       	rjmp	.+14     	; 0x1ac <EEPROM_readByte+0x96>
		
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    if (TWI_getStatus() != TW_MT_DATA_ACK)
        return ERROR;
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	05 c0       	rjmp	.+10     	; 0x1ac <EEPROM_readByte+0x96>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    if (TWI_getStatus() != TW_REP_START)
        return ERROR;
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	03 c0       	rjmp	.+6      	; 0x1ac <EEPROM_readByte+0x96>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
        return ERROR;
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	01 c0       	rjmp	.+2      	; 0x1ac <EEPROM_readByte+0x96>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
    if (TWI_getStatus() != TW_MR_DATA_NACK)
        return ERROR;
 1aa:	80 e0       	ldi	r24, 0x00	; 0

    /* Send the Stop Bit */
    TWI_stop();
    return SUCCESS;
}
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	1f 91       	pop	r17
 1b2:	0f 91       	pop	r16
 1b4:	ff 90       	pop	r15
 1b6:	ef 90       	pop	r14
 1b8:	08 95       	ret

000001ba <TWI_init>:
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    /* Read Data */
    return TWDR;
}
 1ba:	82 e0       	ldi	r24, 0x02	; 2
 1bc:	80 b9       	out	0x00, r24	; 0
 1be:	11 b8       	out	0x01, r1	; 1
 1c0:	82 b9       	out	0x02, r24	; 2
 1c2:	84 e0       	ldi	r24, 0x04	; 4
 1c4:	86 bf       	out	0x36, r24	; 54
 1c6:	08 95       	ret

000001c8 <TWI_start>:
 1c8:	84 ea       	ldi	r24, 0xA4	; 164
 1ca:	86 bf       	out	0x36, r24	; 54
 1cc:	06 b6       	in	r0, 0x36	; 54
 1ce:	07 fe       	sbrs	r0, 7
 1d0:	fd cf       	rjmp	.-6      	; 0x1cc <TWI_start+0x4>
 1d2:	08 95       	ret

000001d4 <TWI_stop>:
 1d4:	84 e9       	ldi	r24, 0x94	; 148
 1d6:	86 bf       	out	0x36, r24	; 54
 1d8:	08 95       	ret

000001da <TWI_write>:
 1da:	83 b9       	out	0x03, r24	; 3
 1dc:	84 e8       	ldi	r24, 0x84	; 132
 1de:	86 bf       	out	0x36, r24	; 54
 1e0:	06 b6       	in	r0, 0x36	; 54
 1e2:	07 fe       	sbrs	r0, 7
 1e4:	fd cf       	rjmp	.-6      	; 0x1e0 <TWI_write+0x6>
 1e6:	08 95       	ret

000001e8 <TWI_readWithNACK>:
{
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
 1e8:	84 e8       	ldi	r24, 0x84	; 132
 1ea:	86 bf       	out	0x36, r24	; 54
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
 1ec:	06 b6       	in	r0, 0x36	; 54
 1ee:	07 fe       	sbrs	r0, 7
 1f0:	fd cf       	rjmp	.-6      	; 0x1ec <TWI_readWithNACK+0x4>
    /* Read Data */
    return TWDR;
 1f2:	83 b1       	in	r24, 0x03	; 3
}
 1f4:	08 95       	ret

000001f6 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
 1f6:	81 b1       	in	r24, 0x01	; 1
    return status;
}
 1f8:	88 7f       	andi	r24, 0xF8	; 248
 1fa:	08 95       	ret

000001fc <KeyPad_4x4_adjustKeyNumber>:

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
	switch(button_number)
 1fc:	48 2f       	mov	r20, r24
 1fe:	50 e0       	ldi	r21, 0x00	; 0
 200:	fa 01       	movw	r30, r20
 202:	31 97       	sbiw	r30, 0x01	; 1
 204:	e0 31       	cpi	r30, 0x10	; 16
 206:	f1 05       	cpc	r31, r1
 208:	18 f5       	brcc	.+70     	; 0x250 <__EEPROM_REGION_LENGTH__+0x50>
 20a:	e6 5d       	subi	r30, 0xD6	; 214
 20c:	ff 4f       	sbci	r31, 0xFF	; 255
 20e:	0c 94 a3 02 	jmp	0x546	; 0x546 <__tablejump2__>
	{
		case 1: return 7; 
 212:	87 e0       	ldi	r24, 0x07	; 7
 214:	08 95       	ret
				break;
		case 2: return 8; 
				break;
		case 3: return 9; 
 216:	89 e0       	ldi	r24, 0x09	; 9
 218:	08 95       	ret
				break;
		case 4: return '%'; // ASCII Code of %
 21a:	85 e2       	ldi	r24, 0x25	; 37
 21c:	08 95       	ret
				break;
		case 5: return 4; 
 21e:	84 e0       	ldi	r24, 0x04	; 4
 220:	08 95       	ret
				break;
		case 6: return 5;
 222:	85 e0       	ldi	r24, 0x05	; 5
 224:	08 95       	ret
				break;
		case 7: return 6; 
 226:	86 e0       	ldi	r24, 0x06	; 6
 228:	08 95       	ret
				break;
		case 8: return '*'; /* ASCII Code of '*' */
 22a:	8a e2       	ldi	r24, 0x2A	; 42
 22c:	08 95       	ret
				break;		
		case 9: return 1; 
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	08 95       	ret
				break;
		case 10: return 2; 
 232:	82 e0       	ldi	r24, 0x02	; 2
 234:	08 95       	ret
				break;
		case 11: return 3; 
 236:	83 e0       	ldi	r24, 0x03	; 3
 238:	08 95       	ret
				break;
		case 12: return '-'; /* ASCII Code of '-' */
 23a:	8d e2       	ldi	r24, 0x2D	; 45
 23c:	08 95       	ret
				break;
		case 13: return 13;  /* ASCII of Enter */
 23e:	8d e0       	ldi	r24, 0x0D	; 13
 240:	08 95       	ret
				break;			
		case 14: return 0; 
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	08 95       	ret
				break;
		case 15: return '='; /* ASCII Code of '=' */
 246:	8d e3       	ldi	r24, 0x3D	; 61
 248:	08 95       	ret
				break;
		case 16: return '+'; /* ASCII Code of '+' */
 24a:	8b e2       	ldi	r24, 0x2B	; 43
 24c:	08 95       	ret
{
	switch(button_number)
	{
		case 1: return 7; 
				break;
		case 2: return 8; 
 24e:	88 e0       	ldi	r24, 0x08	; 8
				break;
		case 16: return '+'; /* ASCII Code of '+' */
				break;
		default: return button_number;								 						
	}
} 
 250:	08 95       	ret

00000252 <KeyPad_getPressedKey>:
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	22 c0       	rjmp	.+68     	; 0x29a <KeyPad_getPressedKey+0x48>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
 256:	20 e1       	ldi	r18, 0x10	; 16
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	08 2e       	mov	r0, r24
 25c:	02 c0       	rjmp	.+4      	; 0x262 <KeyPad_getPressedKey+0x10>
 25e:	22 0f       	add	r18, r18
 260:	33 1f       	adc	r19, r19
 262:	0a 94       	dec	r0
 264:	e2 f7       	brpl	.-8      	; 0x25e <KeyPad_getPressedKey+0xc>
 266:	2a bb       	out	0x1a, r18	; 26
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
 268:	20 95       	com	r18
 26a:	2b bb       	out	0x1b, r18	; 27
			for(row=0;row<N_row;row++) /* loop for rows */
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	12 c0       	rjmp	.+36     	; 0x294 <KeyPad_getPressedKey+0x42>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
 270:	29 b3       	in	r18, 0x19	; 25
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	09 2e       	mov	r0, r25
 276:	02 c0       	rjmp	.+4      	; 0x27c <KeyPad_getPressedKey+0x2a>
 278:	35 95       	asr	r19
 27a:	27 95       	ror	r18
 27c:	0a 94       	dec	r0
 27e:	e2 f7       	brpl	.-8      	; 0x278 <KeyPad_getPressedKey+0x26>
 280:	20 fd       	sbrc	r18, 0
 282:	07 c0       	rjmp	.+14     	; 0x292 <KeyPad_getPressedKey+0x40>
				{
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); 
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
 284:	99 0f       	add	r25, r25
 286:	99 0f       	add	r25, r25
 288:	89 0f       	add	r24, r25
 28a:	8f 5f       	subi	r24, 0xFF	; 255
 28c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <KeyPad_4x4_adjustKeyNumber>
 290:	08 95       	ret
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
 292:	9f 5f       	subi	r25, 0xFF	; 255
 294:	94 30       	cpi	r25, 0x04	; 4
 296:	60 f3       	brcs	.-40     	; 0x270 <KeyPad_getPressedKey+0x1e>
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
 298:	8f 5f       	subi	r24, 0xFF	; 255
 29a:	84 30       	cpi	r24, 0x04	; 4
 29c:	e0 f2       	brcs	.-72     	; 0x256 <KeyPad_getPressedKey+0x4>
 29e:	d9 cf       	rjmp	.-78     	; 0x252 <KeyPad_getPressedKey>

000002a0 <LCD_sendCommand>:
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
}

void LCD_sendCommand(uint8 command)
{
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
 2a0:	98 b3       	in	r25, 0x18	; 24
 2a2:	9d 7f       	andi	r25, 0xFD	; 253
 2a4:	98 bb       	out	0x18, r25	; 24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
 2a6:	98 b3       	in	r25, 0x18	; 24
 2a8:	9b 7f       	andi	r25, 0xFB	; 251
 2aa:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ac:	e9 ef       	ldi	r30, 0xF9	; 249
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	31 97       	sbiw	r30, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <LCD_sendCommand+0x10>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <LCD_sendCommand+0x16>
 2b6:	00 00       	nop
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
 2b8:	98 b3       	in	r25, 0x18	; 24
 2ba:	98 60       	ori	r25, 0x08	; 8
 2bc:	98 bb       	out	0x18, r25	; 24
 2be:	e9 ef       	ldi	r30, 0xF9	; 249
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	31 97       	sbiw	r30, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <LCD_sendCommand+0x22>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <LCD_sendCommand+0x28>
 2c8:	00 00       	nop
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((command & 0xF0) >> 4);
 2ca:	92 b3       	in	r25, 0x12	; 18
 2cc:	28 2f       	mov	r18, r24
 2ce:	22 95       	swap	r18
 2d0:	2f 70       	andi	r18, 0x0F	; 15
 2d2:	90 7f       	andi	r25, 0xF0	; 240
 2d4:	92 2b       	or	r25, r18
 2d6:	92 bb       	out	0x12, r25	; 18
 2d8:	e9 ef       	ldi	r30, 0xF9	; 249
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	31 97       	sbiw	r30, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <LCD_sendCommand+0x3c>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <LCD_sendCommand+0x42>
 2e2:	00 00       	nop
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
 2e4:	98 b3       	in	r25, 0x18	; 24
 2e6:	97 7f       	andi	r25, 0xF7	; 247
 2e8:	98 bb       	out	0x18, r25	; 24
 2ea:	e9 ef       	ldi	r30, 0xF9	; 249
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	31 97       	sbiw	r30, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <LCD_sendCommand+0x4e>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <LCD_sendCommand+0x54>
 2f4:	00 00       	nop
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
 2f6:	98 b3       	in	r25, 0x18	; 24
 2f8:	98 60       	ori	r25, 0x08	; 8
 2fa:	98 bb       	out	0x18, r25	; 24
 2fc:	e9 ef       	ldi	r30, 0xF9	; 249
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	31 97       	sbiw	r30, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <LCD_sendCommand+0x60>
 304:	00 c0       	rjmp	.+0      	; 0x306 <LCD_sendCommand+0x66>
 306:	00 00       	nop

	/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
 308:	92 b3       	in	r25, 0x12	; 18
 30a:	90 7f       	andi	r25, 0xF0	; 240
 30c:	8f 70       	andi	r24, 0x0F	; 15
 30e:	89 2b       	or	r24, r25
 310:	82 bb       	out	0x12, r24	; 18
 312:	89 ef       	ldi	r24, 0xF9	; 249
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	01 97       	sbiw	r24, 0x01	; 1
 318:	f1 f7       	brne	.-4      	; 0x316 <LCD_sendCommand+0x76>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <LCD_sendCommand+0x7c>
 31c:	00 00       	nop
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
 31e:	88 b3       	in	r24, 0x18	; 24
 320:	87 7f       	andi	r24, 0xF7	; 247
 322:	88 bb       	out	0x18, r24	; 24
 324:	e9 ef       	ldi	r30, 0xF9	; 249
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	31 97       	sbiw	r30, 0x01	; 1
 32a:	f1 f7       	brne	.-4      	; 0x328 <LCD_sendCommand+0x88>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <LCD_sendCommand+0x8e>
 32e:	00 00       	nop
 330:	08 95       	ret

00000332 <LCD_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
 332:	87 b3       	in	r24, 0x17	; 23
 334:	8e 60       	ori	r24, 0x0E	; 14
 336:	87 bb       	out	0x17, r24	; 23
	
	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
		#else
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
 338:	81 b3       	in	r24, 0x11	; 17
 33a:	8f 60       	ori	r24, 0x0F	; 15
 33c:	81 bb       	out	0x11, r24	; 17
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
 33e:	82 e0       	ldi	r24, 0x02	; 2
 340:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LCD_sendCommand>
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
 344:	88 e2       	ldi	r24, 0x28	; 40
 346:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LCD_sendCommand>
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
 34a:	8c e0       	ldi	r24, 0x0C	; 12
 34c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LCD_sendCommand>
 356:	08 95       	ret

00000358 <LCD_displayCharacter>:
#endif
}

void LCD_displayCharacter(uint8 data)
{
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
 358:	98 b3       	in	r25, 0x18	; 24
 35a:	92 60       	ori	r25, 0x02	; 2
 35c:	98 bb       	out	0x18, r25	; 24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
 35e:	98 b3       	in	r25, 0x18	; 24
 360:	9b 7f       	andi	r25, 0xFB	; 251
 362:	98 bb       	out	0x18, r25	; 24
 364:	e9 ef       	ldi	r30, 0xF9	; 249
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	31 97       	sbiw	r30, 0x01	; 1
 36a:	f1 f7       	brne	.-4      	; 0x368 <LCD_displayCharacter+0x10>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <LCD_displayCharacter+0x16>
 36e:	00 00       	nop
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
 370:	98 b3       	in	r25, 0x18	; 24
 372:	98 60       	ori	r25, 0x08	; 8
 374:	98 bb       	out	0x18, r25	; 24
 376:	e9 ef       	ldi	r30, 0xF9	; 249
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	31 97       	sbiw	r30, 0x01	; 1
 37c:	f1 f7       	brne	.-4      	; 0x37a <LCD_displayCharacter+0x22>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <LCD_displayCharacter+0x28>
 380:	00 00       	nop
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4);
 382:	92 b3       	in	r25, 0x12	; 18
 384:	28 2f       	mov	r18, r24
 386:	22 95       	swap	r18
 388:	2f 70       	andi	r18, 0x0F	; 15
 38a:	90 7f       	andi	r25, 0xF0	; 240
 38c:	92 2b       	or	r25, r18
 38e:	92 bb       	out	0x12, r25	; 18
 390:	e9 ef       	ldi	r30, 0xF9	; 249
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	31 97       	sbiw	r30, 0x01	; 1
 396:	f1 f7       	brne	.-4      	; 0x394 <LCD_displayCharacter+0x3c>
 398:	00 c0       	rjmp	.+0      	; 0x39a <LCD_displayCharacter+0x42>
 39a:	00 00       	nop
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
 39c:	98 b3       	in	r25, 0x18	; 24
 39e:	97 7f       	andi	r25, 0xF7	; 247
 3a0:	98 bb       	out	0x18, r25	; 24
 3a2:	e9 ef       	ldi	r30, 0xF9	; 249
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	31 97       	sbiw	r30, 0x01	; 1
 3a8:	f1 f7       	brne	.-4      	; 0x3a6 <LCD_displayCharacter+0x4e>
 3aa:	00 c0       	rjmp	.+0      	; 0x3ac <LCD_displayCharacter+0x54>
 3ac:	00 00       	nop
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
 3ae:	98 b3       	in	r25, 0x18	; 24
 3b0:	98 60       	ori	r25, 0x08	; 8
 3b2:	98 bb       	out	0x18, r25	; 24
 3b4:	e9 ef       	ldi	r30, 0xF9	; 249
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	31 97       	sbiw	r30, 0x01	; 1
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <LCD_displayCharacter+0x60>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <LCD_displayCharacter+0x66>
 3be:	00 00       	nop

	/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
 3c0:	92 b3       	in	r25, 0x12	; 18
 3c2:	90 7f       	andi	r25, 0xF0	; 240
 3c4:	8f 70       	andi	r24, 0x0F	; 15
 3c6:	89 2b       	or	r24, r25
 3c8:	82 bb       	out	0x12, r24	; 18
 3ca:	89 ef       	ldi	r24, 0xF9	; 249
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	01 97       	sbiw	r24, 0x01	; 1
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <LCD_displayCharacter+0x76>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <LCD_displayCharacter+0x7c>
 3d4:	00 00       	nop
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
 3d6:	88 b3       	in	r24, 0x18	; 24
 3d8:	87 7f       	andi	r24, 0xF7	; 247
 3da:	88 bb       	out	0x18, r24	; 24
 3dc:	e9 ef       	ldi	r30, 0xF9	; 249
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	31 97       	sbiw	r30, 0x01	; 1
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <LCD_displayCharacter+0x88>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <LCD_displayCharacter+0x8e>
 3e6:	00 00       	nop
 3e8:	08 95       	ret

000003ea <LCD_displayString>:
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}

void LCD_displayString(const char *Str)
{
 3ea:	0f 93       	push	r16
 3ec:	1f 93       	push	r17
 3ee:	cf 93       	push	r28
 3f0:	8c 01       	movw	r16, r24
	uint8 i = 0;
 3f2:	c0 e0       	ldi	r28, 0x00	; 0
	while(Str[i] != '\0')
 3f4:	03 c0       	rjmp	.+6      	; 0x3fc <LCD_displayString+0x12>
	{
		LCD_displayCharacter(Str[i]);
 3f6:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_displayCharacter>
		i++;
 3fa:	cf 5f       	subi	r28, 0xFF	; 255
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
 3fc:	f8 01       	movw	r30, r16
 3fe:	ec 0f       	add	r30, r28
 400:	f1 1d       	adc	r31, r1
 402:	80 81       	ld	r24, Z
 404:	81 11       	cpse	r24, r1
 406:	f7 cf       	rjmp	.-18     	; 0x3f6 <LCD_displayString+0xc>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
 408:	cf 91       	pop	r28
 40a:	1f 91       	pop	r17
 40c:	0f 91       	pop	r16
 40e:	08 95       	ret

00000410 <LCD_goToRowColumn>:
void LCD_goToRowColumn(uint8 row,uint8 col)
{
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
 410:	81 30       	cpi	r24, 0x01	; 1
 412:	31 f0       	breq	.+12     	; 0x420 <LCD_goToRowColumn+0x10>
 414:	70 f0       	brcs	.+28     	; 0x432 <LCD_goToRowColumn+0x22>
 416:	82 30       	cpi	r24, 0x02	; 2
 418:	31 f0       	breq	.+12     	; 0x426 <LCD_goToRowColumn+0x16>
 41a:	83 30       	cpi	r24, 0x03	; 3
 41c:	39 f0       	breq	.+14     	; 0x42c <LCD_goToRowColumn+0x1c>
 41e:	0a c0       	rjmp	.+20     	; 0x434 <LCD_goToRowColumn+0x24>
	{
		case 0:
				Address=col;
				break;
		case 1:
				Address=col+0x40;
 420:	90 e4       	ldi	r25, 0x40	; 64
 422:	96 0f       	add	r25, r22
				break;
 424:	07 c0       	rjmp	.+14     	; 0x434 <LCD_goToRowColumn+0x24>
		case 2:
				Address=col+0x10;
 426:	90 e1       	ldi	r25, 0x10	; 16
 428:	96 0f       	add	r25, r22
				break;
 42a:	04 c0       	rjmp	.+8      	; 0x434 <LCD_goToRowColumn+0x24>
		case 3:
				Address=col+0x50;
 42c:	90 e5       	ldi	r25, 0x50	; 80
 42e:	96 0f       	add	r25, r22
				break;
 430:	01 c0       	rjmp	.+2      	; 0x434 <LCD_goToRowColumn+0x24>
	
	/* first of all calculate the required address */
	switch(row)
	{
		case 0:
				Address=col;
 432:	96 2f       	mov	r25, r22
				Address=col+0x50;
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
 434:	89 2f       	mov	r24, r25
 436:	80 68       	ori	r24, 0x80	; 128
 438:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LCD_sendCommand>
 43c:	08 95       	ret

0000043e <LCD_displayStringRowColumn>:
}

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
 43e:	cf 93       	push	r28
 440:	df 93       	push	r29
 442:	ea 01       	movw	r28, r20
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
 444:	0e 94 08 02 	call	0x410	; 0x410 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
 448:	ce 01       	movw	r24, r28
 44a:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_displayString>
}
 44e:	df 91       	pop	r29
 450:	cf 91       	pop	r28
 452:	08 95       	ret

00000454 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
 454:	cf 93       	push	r28
 456:	df 93       	push	r29
 458:	cd b7       	in	r28, 0x3d	; 61
 45a:	de b7       	in	r29, 0x3e	; 62
 45c:	60 97       	sbiw	r28, 0x10	; 16
 45e:	0f b6       	in	r0, 0x3f	; 63
 460:	f8 94       	cli
 462:	de bf       	out	0x3e, r29	; 62
 464:	0f be       	out	0x3f, r0	; 63
 466:	cd bf       	out	0x3d, r28	; 61
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
 468:	4a e0       	ldi	r20, 0x0A	; 10
 46a:	50 e0       	ldi	r21, 0x00	; 0
 46c:	be 01       	movw	r22, r28
 46e:	6f 5f       	subi	r22, 0xFF	; 255
 470:	7f 4f       	sbci	r23, 0xFF	; 255
 472:	0e 94 a9 02 	call	0x552	; 0x552 <itoa>
   LCD_displayString(buff);
 476:	ce 01       	movw	r24, r28
 478:	01 96       	adiw	r24, 0x01	; 1
 47a:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_displayString>
}
 47e:	60 96       	adiw	r28, 0x10	; 16
 480:	0f b6       	in	r0, 0x3f	; 63
 482:	f8 94       	cli
 484:	de bf       	out	0x3e, r29	; 62
 486:	0f be       	out	0x3f, r0	; 63
 488:	cd bf       	out	0x3d, r28	; 61
 48a:	df 91       	pop	r29
 48c:	cf 91       	pop	r28
 48e:	08 95       	ret

00000490 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LCD_sendCommand>
 496:	08 95       	ret

00000498 <main>:
#include "external_eeprom.h"
#include "lcd.h"
#include "keypad.h"

int main(void)
{
 498:	cf 93       	push	r28
 49a:	df 93       	push	r29
 49c:	00 d0       	rcall	.+0      	; 0x49e <main+0x6>
 49e:	cd b7       	in	r28, 0x3d	; 61
 4a0:	de b7       	in	r29, 0x3e	; 62

	unsigned char key;
	uint8 val = 1;
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	8a 83       	std	Y+2, r24	; 0x02
	/*Init LCD*/
	LCD_init();
 4a6:	0e 94 99 01 	call	0x332	; 0x332 <LCD_init>
	LCD_displayStringRowColumn(0,0,"Hello ^^");
 4aa:	40 e6       	ldi	r20, 0x60	; 96
 4ac:	50 e0       	ldi	r21, 0x00	; 0
 4ae:	60 e0       	ldi	r22, 0x00	; 0
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	0e 94 1f 02 	call	0x43e	; 0x43e <LCD_displayStringRowColumn>
	
	/* Init EEPROM */
	EEPROM_init();
 4b6:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_init>

	while(1){
		/* if any switch pressed for more than 500 ms it counts more than one press */
		key = KeyPad_getPressedKey(); /* get the pressed key number */
 4ba:	0e 94 29 01 	call	0x252	; 0x252 <KeyPad_getPressedKey>
 4be:	89 83       	std	Y+1, r24	; 0x01
		if((key <= 9) && (key >= 0))
 4c0:	8a 30       	cpi	r24, 0x0A	; 10
 4c2:	80 f4       	brcc	.+32     	; 0x4e4 <main+0x4c>
		{
			EEPROM_writeByte(0x0311, key); /* Write 0x0F in the external EEPROM */
 4c4:	68 2f       	mov	r22, r24
 4c6:	81 e1       	ldi	r24, 0x11	; 17
 4c8:	93 e0       	ldi	r25, 0x03	; 3
 4ca:	0e 94 54 00 	call	0xa8	; 0xa8 <EEPROM_writeByte>
			LCD_intgerToString(	EEPROM_readByte(0x0311, &key) /* Read 0x0F from the external EEPROM */); /* display the pressed keypad switch */
 4ce:	be 01       	movw	r22, r28
 4d0:	6f 5f       	subi	r22, 0xFF	; 255
 4d2:	7f 4f       	sbci	r23, 0xFF	; 255
 4d4:	81 e1       	ldi	r24, 0x11	; 17
 4d6:	93 e0       	ldi	r25, 0x03	; 3
 4d8:	0e 94 8b 00 	call	0x116	; 0x116 <EEPROM_readByte>
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	0e 94 2a 02 	call	0x454	; 0x454 <LCD_intgerToString>
 4e2:	27 c0       	rjmp	.+78     	; 0x532 <main+0x9a>
		}
		else if(key == 13){
 4e4:	8d 30       	cpi	r24, 0x0D	; 13
 4e6:	b1 f4       	brne	.+44     	; 0x514 <main+0x7c>
			LCD_clearScreen();
 4e8:	0e 94 48 02 	call	0x490	; 0x490 <LCD_clearScreen>
 4ec:	2f e9       	ldi	r18, 0x9F	; 159
 4ee:	86 e8       	ldi	r24, 0x86	; 134
 4f0:	91 e0       	ldi	r25, 0x01	; 1
 4f2:	21 50       	subi	r18, 0x01	; 1
 4f4:	80 40       	sbci	r24, 0x00	; 0
 4f6:	90 40       	sbci	r25, 0x00	; 0
 4f8:	e1 f7       	brne	.-8      	; 0x4f2 <main+0x5a>
 4fa:	00 c0       	rjmp	.+0      	; 0x4fc <main+0x64>
 4fc:	00 00       	nop
			_delay_ms(500);
		    LCD_intgerToString(	EEPROM_readByte(0x0311, &val));
 4fe:	be 01       	movw	r22, r28
 500:	6e 5f       	subi	r22, 0xFE	; 254
 502:	7f 4f       	sbci	r23, 0xFF	; 255
 504:	81 e1       	ldi	r24, 0x11	; 17
 506:	93 e0       	ldi	r25, 0x03	; 3
 508:	0e 94 8b 00 	call	0x116	; 0x116 <EEPROM_readByte>
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	0e 94 2a 02 	call	0x454	; 0x454 <LCD_intgerToString>
 512:	0f c0       	rjmp	.+30     	; 0x532 <main+0x9a>

		}
		else
		{
			EEPROM_writeByte(0x0311, key); /* Write 0x0F in the external EEPROM */
 514:	68 2f       	mov	r22, r24
 516:	81 e1       	ldi	r24, 0x11	; 17
 518:	93 e0       	ldi	r25, 0x03	; 3
 51a:	0e 94 54 00 	call	0xa8	; 0xa8 <EEPROM_writeByte>
			LCD_intgerToString(	EEPROM_readByte(0x0311, &key) /* Read 0x0F from the external EEPROM */); /* display the pressed keypad switch */
 51e:	be 01       	movw	r22, r28
 520:	6f 5f       	subi	r22, 0xFF	; 255
 522:	7f 4f       	sbci	r23, 0xFF	; 255
 524:	81 e1       	ldi	r24, 0x11	; 17
 526:	93 e0       	ldi	r25, 0x03	; 3
 528:	0e 94 8b 00 	call	0x116	; 0x116 <EEPROM_readByte>
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	0e 94 2a 02 	call	0x454	; 0x454 <LCD_intgerToString>
 532:	2f e9       	ldi	r18, 0x9F	; 159
 534:	86 e8       	ldi	r24, 0x86	; 134
 536:	91 e0       	ldi	r25, 0x01	; 1
 538:	21 50       	subi	r18, 0x01	; 1
 53a:	80 40       	sbci	r24, 0x00	; 0
 53c:	90 40       	sbci	r25, 0x00	; 0
 53e:	e1 f7       	brne	.-8      	; 0x538 <main+0xa0>
 540:	00 c0       	rjmp	.+0      	; 0x542 <main+0xaa>
 542:	00 00       	nop
 544:	ba cf       	rjmp	.-140    	; 0x4ba <main+0x22>

00000546 <__tablejump2__>:
 546:	ee 0f       	add	r30, r30
 548:	ff 1f       	adc	r31, r31
 54a:	05 90       	lpm	r0, Z+
 54c:	f4 91       	lpm	r31, Z
 54e:	e0 2d       	mov	r30, r0
 550:	09 94       	ijmp

00000552 <itoa>:
 552:	45 32       	cpi	r20, 0x25	; 37
 554:	51 05       	cpc	r21, r1
 556:	20 f4       	brcc	.+8      	; 0x560 <itoa+0xe>
 558:	42 30       	cpi	r20, 0x02	; 2
 55a:	10 f0       	brcs	.+4      	; 0x560 <itoa+0xe>
 55c:	0c 94 b4 02 	jmp	0x568	; 0x568 <__itoa_ncheck>
 560:	fb 01       	movw	r30, r22
 562:	10 82       	st	Z, r1
 564:	cb 01       	movw	r24, r22
 566:	08 95       	ret

00000568 <__itoa_ncheck>:
 568:	bb 27       	eor	r27, r27
 56a:	4a 30       	cpi	r20, 0x0A	; 10
 56c:	31 f4       	brne	.+12     	; 0x57a <__itoa_ncheck+0x12>
 56e:	99 23       	and	r25, r25
 570:	22 f4       	brpl	.+8      	; 0x57a <__itoa_ncheck+0x12>
 572:	bd e2       	ldi	r27, 0x2D	; 45
 574:	90 95       	com	r25
 576:	81 95       	neg	r24
 578:	9f 4f       	sbci	r25, 0xFF	; 255
 57a:	0c 94 c0 02 	jmp	0x580	; 0x580 <__utoa_common>

0000057e <__utoa_ncheck>:
 57e:	bb 27       	eor	r27, r27

00000580 <__utoa_common>:
 580:	fb 01       	movw	r30, r22
 582:	55 27       	eor	r21, r21
 584:	aa 27       	eor	r26, r26
 586:	88 0f       	add	r24, r24
 588:	99 1f       	adc	r25, r25
 58a:	aa 1f       	adc	r26, r26
 58c:	a4 17       	cp	r26, r20
 58e:	10 f0       	brcs	.+4      	; 0x594 <__utoa_common+0x14>
 590:	a4 1b       	sub	r26, r20
 592:	83 95       	inc	r24
 594:	50 51       	subi	r21, 0x10	; 16
 596:	b9 f7       	brne	.-18     	; 0x586 <__utoa_common+0x6>
 598:	a0 5d       	subi	r26, 0xD0	; 208
 59a:	aa 33       	cpi	r26, 0x3A	; 58
 59c:	08 f0       	brcs	.+2      	; 0x5a0 <__utoa_common+0x20>
 59e:	a9 5d       	subi	r26, 0xD9	; 217
 5a0:	a1 93       	st	Z+, r26
 5a2:	00 97       	sbiw	r24, 0x00	; 0
 5a4:	79 f7       	brne	.-34     	; 0x584 <__utoa_common+0x4>
 5a6:	b1 11       	cpse	r27, r1
 5a8:	b1 93       	st	Z+, r27
 5aa:	11 92       	st	Z+, r1
 5ac:	cb 01       	movw	r24, r22
 5ae:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <strrev>

000005b2 <strrev>:
 5b2:	dc 01       	movw	r26, r24
 5b4:	fc 01       	movw	r30, r24
 5b6:	67 2f       	mov	r22, r23
 5b8:	71 91       	ld	r23, Z+
 5ba:	77 23       	and	r23, r23
 5bc:	e1 f7       	brne	.-8      	; 0x5b6 <strrev+0x4>
 5be:	32 97       	sbiw	r30, 0x02	; 2
 5c0:	04 c0       	rjmp	.+8      	; 0x5ca <strrev+0x18>
 5c2:	7c 91       	ld	r23, X
 5c4:	6d 93       	st	X+, r22
 5c6:	70 83       	st	Z, r23
 5c8:	62 91       	ld	r22, -Z
 5ca:	ae 17       	cp	r26, r30
 5cc:	bf 07       	cpc	r27, r31
 5ce:	c8 f3       	brcs	.-14     	; 0x5c2 <strrev+0x10>
 5d0:	08 95       	ret

000005d2 <_exit>:
 5d2:	f8 94       	cli

000005d4 <__stop_program>:
 5d4:	ff cf       	rjmp	.-2      	; 0x5d4 <__stop_program>
