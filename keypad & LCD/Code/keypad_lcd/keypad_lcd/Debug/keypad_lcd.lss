
keypad_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000418  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000418  0000048c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000496  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ec2  00000000  00000000  000005a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000835  00000000  00000000  00001466  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000712  00000000  00000000  00001c9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000118  00000000  00000000  000023b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000487  00000000  00000000  000024c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006cc  00000000  00000000  0000294f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  0000301b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	5c 00       	.word	0x005c	; ????
  56:	7a 00       	.word	0x007a	; ????
  58:	5e 00       	.word	0x005e	; ????
  5a:	60 00       	.word	0x0060	; ????
  5c:	62 00       	.word	0x0062	; ????
  5e:	64 00       	.word	0x0064	; ????
  60:	66 00       	.word	0x0066	; ????
  62:	68 00       	.word	0x0068	; ????
  64:	6a 00       	.word	0x006a	; ????
  66:	6c 00       	.word	0x006c	; ????
  68:	6e 00       	.word	0x006e	; ????
  6a:	70 00       	.word	0x0070	; ????
  6c:	72 00       	.word	0x0072	; ????
  6e:	74 00       	.word	0x0074	; ????
  70:	76 00       	.word	0x0076	; ????
  72:	78 00       	.word	0x0078	; ????

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf e5       	ldi	r28, 0x5F	; 95
  7a:	d4 e0       	ldi	r29, 0x04	; 4
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	10 e0       	ldi	r17, 0x00	; 0
  82:	a0 e6       	ldi	r26, 0x60	; 96
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e8 e1       	ldi	r30, 0x18	; 24
  88:	f4 e0       	ldi	r31, 0x04	; 4
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	aa 36       	cpi	r26, 0x6A	; 106
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>
  96:	0e 94 9f 01 	call	0x33e	; 0x33e <main>
  9a:	0c 94 0a 02 	jmp	0x414	; 0x414 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <KeyPad_4x4_adjustKeyNumber>:

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
	switch(button_number)
  a2:	48 2f       	mov	r20, r24
  a4:	50 e0       	ldi	r21, 0x00	; 0
  a6:	fa 01       	movw	r30, r20
  a8:	31 97       	sbiw	r30, 0x01	; 1
  aa:	e0 31       	cpi	r30, 0x10	; 16
  ac:	f1 05       	cpc	r31, r1
  ae:	18 f5       	brcc	.+70     	; 0xf6 <KeyPad_4x4_adjustKeyNumber+0x54>
  b0:	e6 5d       	subi	r30, 0xD6	; 214
  b2:	ff 4f       	sbci	r31, 0xFF	; 255
  b4:	0c 94 c4 01 	jmp	0x388	; 0x388 <__tablejump2__>
	{
		case 1: return 7; 
  b8:	87 e0       	ldi	r24, 0x07	; 7
  ba:	08 95       	ret
				break;
		case 2: return 8; 
				break;
		case 3: return 9; 
  bc:	89 e0       	ldi	r24, 0x09	; 9
  be:	08 95       	ret
				break;
		case 4: return '%'; // ASCII Code of %
  c0:	85 e2       	ldi	r24, 0x25	; 37
  c2:	08 95       	ret
				break;
		case 5: return 4; 
  c4:	84 e0       	ldi	r24, 0x04	; 4
  c6:	08 95       	ret
				break;
		case 6: return 5;
  c8:	85 e0       	ldi	r24, 0x05	; 5
  ca:	08 95       	ret
				break;
		case 7: return 6; 
  cc:	86 e0       	ldi	r24, 0x06	; 6
  ce:	08 95       	ret
				break;
		case 8: return '*'; /* ASCII Code of '*' */
  d0:	8a e2       	ldi	r24, 0x2A	; 42
  d2:	08 95       	ret
				break;		
		case 9: return 1; 
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	08 95       	ret
				break;
		case 10: return 2; 
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	08 95       	ret
				break;
		case 11: return 3; 
  dc:	83 e0       	ldi	r24, 0x03	; 3
  de:	08 95       	ret
				break;
		case 12: return '-'; /* ASCII Code of '-' */
  e0:	8d e2       	ldi	r24, 0x2D	; 45
  e2:	08 95       	ret
				break;
		case 13: return 13;  /* ASCII of Enter */
  e4:	8d e0       	ldi	r24, 0x0D	; 13
  e6:	08 95       	ret
				break;			
		case 14: return 0; 
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	08 95       	ret
				break;
		case 15: return '='; /* ASCII Code of '=' */
  ec:	8d e3       	ldi	r24, 0x3D	; 61
  ee:	08 95       	ret
				break;
		case 16: return '+'; /* ASCII Code of '+' */
  f0:	8b e2       	ldi	r24, 0x2B	; 43
  f2:	08 95       	ret
{
	switch(button_number)
	{
		case 1: return 7; 
				break;
		case 2: return 8; 
  f4:	88 e0       	ldi	r24, 0x08	; 8
				break;
		case 16: return '+'; /* ASCII Code of '+' */
				break;
		default: return button_number;								 						
	}
} 
  f6:	08 95       	ret

000000f8 <KeyPad_getPressedKey>:
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	22 c0       	rjmp	.+68     	; 0x140 <KeyPad_getPressedKey+0x48>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
  fc:	20 e1       	ldi	r18, 0x10	; 16
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	08 2e       	mov	r0, r24
 102:	02 c0       	rjmp	.+4      	; 0x108 <KeyPad_getPressedKey+0x10>
 104:	22 0f       	add	r18, r18
 106:	33 1f       	adc	r19, r19
 108:	0a 94       	dec	r0
 10a:	e2 f7       	brpl	.-8      	; 0x104 <KeyPad_getPressedKey+0xc>
 10c:	2a bb       	out	0x1a, r18	; 26
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
 10e:	20 95       	com	r18
 110:	2b bb       	out	0x1b, r18	; 27
			for(row=0;row<N_row;row++) /* loop for rows */
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	12 c0       	rjmp	.+36     	; 0x13a <KeyPad_getPressedKey+0x42>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
 116:	29 b3       	in	r18, 0x19	; 25
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	09 2e       	mov	r0, r25
 11c:	02 c0       	rjmp	.+4      	; 0x122 <KeyPad_getPressedKey+0x2a>
 11e:	35 95       	asr	r19
 120:	27 95       	ror	r18
 122:	0a 94       	dec	r0
 124:	e2 f7       	brpl	.-8      	; 0x11e <KeyPad_getPressedKey+0x26>
 126:	20 fd       	sbrc	r18, 0
 128:	07 c0       	rjmp	.+14     	; 0x138 <KeyPad_getPressedKey+0x40>
				{
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); 
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
 12a:	99 0f       	add	r25, r25
 12c:	99 0f       	add	r25, r25
 12e:	89 0f       	add	r24, r25
 130:	8f 5f       	subi	r24, 0xFF	; 255
 132:	0e 94 51 00 	call	0xa2	; 0xa2 <KeyPad_4x4_adjustKeyNumber>
 136:	08 95       	ret
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
 138:	9f 5f       	subi	r25, 0xFF	; 255
 13a:	94 30       	cpi	r25, 0x04	; 4
 13c:	60 f3       	brcs	.-40     	; 0x116 <KeyPad_getPressedKey+0x1e>
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
 13e:	8f 5f       	subi	r24, 0xFF	; 255
 140:	84 30       	cpi	r24, 0x04	; 4
 142:	e0 f2       	brcs	.-72     	; 0xfc <KeyPad_getPressedKey+0x4>
 144:	d9 cf       	rjmp	.-78     	; 0xf8 <KeyPad_getPressedKey>

00000146 <LCD_sendCommand>:
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
}

void LCD_sendCommand(uint8 command)
{
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
 146:	98 b3       	in	r25, 0x18	; 24
 148:	9d 7f       	andi	r25, 0xFD	; 253
 14a:	98 bb       	out	0x18, r25	; 24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
 14c:	98 b3       	in	r25, 0x18	; 24
 14e:	9b 7f       	andi	r25, 0xFB	; 251
 150:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 152:	e9 ef       	ldi	r30, 0xF9	; 249
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	31 97       	sbiw	r30, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <LCD_sendCommand+0x10>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <LCD_sendCommand+0x16>
 15c:	00 00       	nop
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
 15e:	98 b3       	in	r25, 0x18	; 24
 160:	98 60       	ori	r25, 0x08	; 8
 162:	98 bb       	out	0x18, r25	; 24
 164:	e9 ef       	ldi	r30, 0xF9	; 249
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	31 97       	sbiw	r30, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <LCD_sendCommand+0x22>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <LCD_sendCommand+0x28>
 16e:	00 00       	nop
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((command & 0xF0) >> 4);
 170:	92 b3       	in	r25, 0x12	; 18
 172:	28 2f       	mov	r18, r24
 174:	22 95       	swap	r18
 176:	2f 70       	andi	r18, 0x0F	; 15
 178:	90 7f       	andi	r25, 0xF0	; 240
 17a:	92 2b       	or	r25, r18
 17c:	92 bb       	out	0x12, r25	; 18
 17e:	e9 ef       	ldi	r30, 0xF9	; 249
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	31 97       	sbiw	r30, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <LCD_sendCommand+0x3c>
 186:	00 c0       	rjmp	.+0      	; 0x188 <LCD_sendCommand+0x42>
 188:	00 00       	nop
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
 18a:	98 b3       	in	r25, 0x18	; 24
 18c:	97 7f       	andi	r25, 0xF7	; 247
 18e:	98 bb       	out	0x18, r25	; 24
 190:	e9 ef       	ldi	r30, 0xF9	; 249
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	31 97       	sbiw	r30, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <LCD_sendCommand+0x4e>
 198:	00 c0       	rjmp	.+0      	; 0x19a <LCD_sendCommand+0x54>
 19a:	00 00       	nop
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
 19c:	98 b3       	in	r25, 0x18	; 24
 19e:	98 60       	ori	r25, 0x08	; 8
 1a0:	98 bb       	out	0x18, r25	; 24
 1a2:	e9 ef       	ldi	r30, 0xF9	; 249
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	31 97       	sbiw	r30, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <LCD_sendCommand+0x60>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <LCD_sendCommand+0x66>
 1ac:	00 00       	nop

	/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
 1ae:	92 b3       	in	r25, 0x12	; 18
 1b0:	90 7f       	andi	r25, 0xF0	; 240
 1b2:	8f 70       	andi	r24, 0x0F	; 15
 1b4:	89 2b       	or	r24, r25
 1b6:	82 bb       	out	0x12, r24	; 18
 1b8:	89 ef       	ldi	r24, 0xF9	; 249
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <LCD_sendCommand+0x76>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <LCD_sendCommand+0x7c>
 1c2:	00 00       	nop
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
 1c4:	88 b3       	in	r24, 0x18	; 24
 1c6:	87 7f       	andi	r24, 0xF7	; 247
 1c8:	88 bb       	out	0x18, r24	; 24
 1ca:	e9 ef       	ldi	r30, 0xF9	; 249
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	31 97       	sbiw	r30, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <LCD_sendCommand+0x88>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <LCD_sendCommand+0x8e>
 1d4:	00 00       	nop
 1d6:	08 95       	ret

000001d8 <LCD_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
 1d8:	87 b3       	in	r24, 0x17	; 23
 1da:	8e 60       	ori	r24, 0x0E	; 14
 1dc:	87 bb       	out	0x17, r24	; 23
	
	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
		#else
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
 1de:	81 b3       	in	r24, 0x11	; 17
 1e0:	8f 60       	ori	r24, 0x0F	; 15
 1e2:	81 bb       	out	0x11, r24	; 17
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
 1e4:	82 e0       	ldi	r24, 0x02	; 2
 1e6:	0e 94 a3 00 	call	0x146	; 0x146 <LCD_sendCommand>
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
 1ea:	88 e2       	ldi	r24, 0x28	; 40
 1ec:	0e 94 a3 00 	call	0x146	; 0x146 <LCD_sendCommand>
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
 1f0:	8c e0       	ldi	r24, 0x0C	; 12
 1f2:	0e 94 a3 00 	call	0x146	; 0x146 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	0e 94 a3 00 	call	0x146	; 0x146 <LCD_sendCommand>
 1fc:	08 95       	ret

000001fe <LCD_displayCharacter>:
#endif
}

void LCD_displayCharacter(uint8 data)
{
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
 1fe:	98 b3       	in	r25, 0x18	; 24
 200:	92 60       	ori	r25, 0x02	; 2
 202:	98 bb       	out	0x18, r25	; 24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
 204:	98 b3       	in	r25, 0x18	; 24
 206:	9b 7f       	andi	r25, 0xFB	; 251
 208:	98 bb       	out	0x18, r25	; 24
 20a:	e9 ef       	ldi	r30, 0xF9	; 249
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	31 97       	sbiw	r30, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <__EEPROM_REGION_LENGTH__+0xe>
 212:	00 c0       	rjmp	.+0      	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>
 214:	00 00       	nop
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
 216:	98 b3       	in	r25, 0x18	; 24
 218:	98 60       	ori	r25, 0x08	; 8
 21a:	98 bb       	out	0x18, r25	; 24
 21c:	e9 ef       	ldi	r30, 0xF9	; 249
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	31 97       	sbiw	r30, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <__EEPROM_REGION_LENGTH__+0x20>
 224:	00 c0       	rjmp	.+0      	; 0x226 <__EEPROM_REGION_LENGTH__+0x26>
 226:	00 00       	nop
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4);
 228:	92 b3       	in	r25, 0x12	; 18
 22a:	28 2f       	mov	r18, r24
 22c:	22 95       	swap	r18
 22e:	2f 70       	andi	r18, 0x0F	; 15
 230:	90 7f       	andi	r25, 0xF0	; 240
 232:	92 2b       	or	r25, r18
 234:	92 bb       	out	0x12, r25	; 18
 236:	e9 ef       	ldi	r30, 0xF9	; 249
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	31 97       	sbiw	r30, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <__EEPROM_REGION_LENGTH__+0x3a>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <__EEPROM_REGION_LENGTH__+0x40>
 240:	00 00       	nop
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
 242:	98 b3       	in	r25, 0x18	; 24
 244:	97 7f       	andi	r25, 0xF7	; 247
 246:	98 bb       	out	0x18, r25	; 24
 248:	e9 ef       	ldi	r30, 0xF9	; 249
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	31 97       	sbiw	r30, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <__EEPROM_REGION_LENGTH__+0x4c>
 250:	00 c0       	rjmp	.+0      	; 0x252 <__EEPROM_REGION_LENGTH__+0x52>
 252:	00 00       	nop
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
 254:	98 b3       	in	r25, 0x18	; 24
 256:	98 60       	ori	r25, 0x08	; 8
 258:	98 bb       	out	0x18, r25	; 24
 25a:	e9 ef       	ldi	r30, 0xF9	; 249
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	31 97       	sbiw	r30, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <__EEPROM_REGION_LENGTH__+0x5e>
 262:	00 c0       	rjmp	.+0      	; 0x264 <__EEPROM_REGION_LENGTH__+0x64>
 264:	00 00       	nop

	/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
 266:	92 b3       	in	r25, 0x12	; 18
 268:	90 7f       	andi	r25, 0xF0	; 240
 26a:	8f 70       	andi	r24, 0x0F	; 15
 26c:	89 2b       	or	r24, r25
 26e:	82 bb       	out	0x12, r24	; 18
 270:	89 ef       	ldi	r24, 0xF9	; 249
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <__EEPROM_REGION_LENGTH__+0x74>
 278:	00 c0       	rjmp	.+0      	; 0x27a <__EEPROM_REGION_LENGTH__+0x7a>
 27a:	00 00       	nop
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
 27c:	88 b3       	in	r24, 0x18	; 24
 27e:	87 7f       	andi	r24, 0xF7	; 247
 280:	88 bb       	out	0x18, r24	; 24
 282:	e9 ef       	ldi	r30, 0xF9	; 249
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	31 97       	sbiw	r30, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <__EEPROM_REGION_LENGTH__+0x86>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <__EEPROM_REGION_LENGTH__+0x8c>
 28c:	00 00       	nop
 28e:	08 95       	ret

00000290 <LCD_displayString>:
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}

void LCD_displayString(const char *Str)
{
 290:	0f 93       	push	r16
 292:	1f 93       	push	r17
 294:	cf 93       	push	r28
 296:	8c 01       	movw	r16, r24
	uint8 i = 0;
 298:	c0 e0       	ldi	r28, 0x00	; 0
	while(Str[i] != '\0')
 29a:	03 c0       	rjmp	.+6      	; 0x2a2 <LCD_displayString+0x12>
	{
		LCD_displayCharacter(Str[i]);
 29c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_displayCharacter>
		i++;
 2a0:	cf 5f       	subi	r28, 0xFF	; 255
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
 2a2:	f8 01       	movw	r30, r16
 2a4:	ec 0f       	add	r30, r28
 2a6:	f1 1d       	adc	r31, r1
 2a8:	80 81       	ld	r24, Z
 2aa:	81 11       	cpse	r24, r1
 2ac:	f7 cf       	rjmp	.-18     	; 0x29c <LCD_displayString+0xc>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
 2ae:	cf 91       	pop	r28
 2b0:	1f 91       	pop	r17
 2b2:	0f 91       	pop	r16
 2b4:	08 95       	ret

000002b6 <LCD_goToRowColumn>:
void LCD_goToRowColumn(uint8 row,uint8 col)
{
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
 2b6:	81 30       	cpi	r24, 0x01	; 1
 2b8:	31 f0       	breq	.+12     	; 0x2c6 <LCD_goToRowColumn+0x10>
 2ba:	70 f0       	brcs	.+28     	; 0x2d8 <LCD_goToRowColumn+0x22>
 2bc:	82 30       	cpi	r24, 0x02	; 2
 2be:	31 f0       	breq	.+12     	; 0x2cc <LCD_goToRowColumn+0x16>
 2c0:	83 30       	cpi	r24, 0x03	; 3
 2c2:	39 f0       	breq	.+14     	; 0x2d2 <LCD_goToRowColumn+0x1c>
 2c4:	0a c0       	rjmp	.+20     	; 0x2da <LCD_goToRowColumn+0x24>
	{
		case 0:
				Address=col;
				break;
		case 1:
				Address=col+0x40;
 2c6:	90 e4       	ldi	r25, 0x40	; 64
 2c8:	96 0f       	add	r25, r22
				break;
 2ca:	07 c0       	rjmp	.+14     	; 0x2da <LCD_goToRowColumn+0x24>
		case 2:
				Address=col+0x10;
 2cc:	90 e1       	ldi	r25, 0x10	; 16
 2ce:	96 0f       	add	r25, r22
				break;
 2d0:	04 c0       	rjmp	.+8      	; 0x2da <LCD_goToRowColumn+0x24>
		case 3:
				Address=col+0x50;
 2d2:	90 e5       	ldi	r25, 0x50	; 80
 2d4:	96 0f       	add	r25, r22
				break;
 2d6:	01 c0       	rjmp	.+2      	; 0x2da <LCD_goToRowColumn+0x24>
	
	/* first of all calculate the required address */
	switch(row)
	{
		case 0:
				Address=col;
 2d8:	96 2f       	mov	r25, r22
				Address=col+0x50;
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
 2da:	89 2f       	mov	r24, r25
 2dc:	80 68       	ori	r24, 0x80	; 128
 2de:	0e 94 a3 00 	call	0x146	; 0x146 <LCD_sendCommand>
 2e2:	08 95       	ret

000002e4 <LCD_displayStringRowColumn>:
}

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
 2e4:	cf 93       	push	r28
 2e6:	df 93       	push	r29
 2e8:	ea 01       	movw	r28, r20
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
 2ea:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
 2ee:	ce 01       	movw	r24, r28
 2f0:	0e 94 48 01 	call	0x290	; 0x290 <LCD_displayString>
}
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	08 95       	ret

000002fa <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
 2fa:	cf 93       	push	r28
 2fc:	df 93       	push	r29
 2fe:	cd b7       	in	r28, 0x3d	; 61
 300:	de b7       	in	r29, 0x3e	; 62
 302:	60 97       	sbiw	r28, 0x10	; 16
 304:	0f b6       	in	r0, 0x3f	; 63
 306:	f8 94       	cli
 308:	de bf       	out	0x3e, r29	; 62
 30a:	0f be       	out	0x3f, r0	; 63
 30c:	cd bf       	out	0x3d, r28	; 61
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
 30e:	4a e0       	ldi	r20, 0x0A	; 10
 310:	50 e0       	ldi	r21, 0x00	; 0
 312:	be 01       	movw	r22, r28
 314:	6f 5f       	subi	r22, 0xFF	; 255
 316:	7f 4f       	sbci	r23, 0xFF	; 255
 318:	0e 94 ca 01 	call	0x394	; 0x394 <itoa>
   LCD_displayString(buff);
 31c:	ce 01       	movw	r24, r28
 31e:	01 96       	adiw	r24, 0x01	; 1
 320:	0e 94 48 01 	call	0x290	; 0x290 <LCD_displayString>
}
 324:	60 96       	adiw	r28, 0x10	; 16
 326:	0f b6       	in	r0, 0x3f	; 63
 328:	f8 94       	cli
 32a:	de bf       	out	0x3e, r29	; 62
 32c:	0f be       	out	0x3f, r0	; 63
 32e:	cd bf       	out	0x3d, r28	; 61
 330:	df 91       	pop	r29
 332:	cf 91       	pop	r28
 334:	08 95       	ret

00000336 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	0e 94 a3 00 	call	0x146	; 0x146 <LCD_sendCommand>
 33c:	08 95       	ret

0000033e <main>:
#include "keypad.h"

int main(void)
{
	unsigned char key;
	LCD_init();
 33e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCD_init>
	LCD_displayStringRowColumn(0,0,"Hello ^^");
 342:	40 e6       	ldi	r20, 0x60	; 96
 344:	50 e0       	ldi	r21, 0x00	; 0
 346:	60 e0       	ldi	r22, 0x00	; 0
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_displayStringRowColumn>
	LCD_goToRowColumn(2,0);
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	82 e0       	ldi	r24, 0x02	; 2
 352:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_goToRowColumn>
    while (1) 
    {
		/* if any switch pressed for more than 500 ms it counts more than one press */
		key = KeyPad_getPressedKey(); /* get the pressed key number */
 356:	0e 94 7c 00 	call	0xf8	; 0xf8 <KeyPad_getPressedKey>
		if((key <= 9) && (key >= 0))
 35a:	8a 30       	cpi	r24, 0x0A	; 10
 35c:	20 f4       	brcc	.+8      	; 0x366 <main+0x28>
		{
			LCD_intgerToString(key); /* display the pressed keypad switch */
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LCD_intgerToString>
 364:	07 c0       	rjmp	.+14     	; 0x374 <main+0x36>
		}
		else if(key == 13){
 366:	8d 30       	cpi	r24, 0x0D	; 13
 368:	19 f4       	brne	.+6      	; 0x370 <main+0x32>
			LCD_clearScreen();
 36a:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_clearScreen>
 36e:	02 c0       	rjmp	.+4      	; 0x374 <main+0x36>
		}
		else
		{
			LCD_displayCharacter(key); /* display the pressed keypad switch */
 370:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_displayCharacter>
 374:	2f e9       	ldi	r18, 0x9F	; 159
 376:	86 e8       	ldi	r24, 0x86	; 134
 378:	91 e0       	ldi	r25, 0x01	; 1
 37a:	21 50       	subi	r18, 0x01	; 1
 37c:	80 40       	sbci	r24, 0x00	; 0
 37e:	90 40       	sbci	r25, 0x00	; 0
 380:	e1 f7       	brne	.-8      	; 0x37a <main+0x3c>
 382:	00 c0       	rjmp	.+0      	; 0x384 <main+0x46>
 384:	00 00       	nop
 386:	e7 cf       	rjmp	.-50     	; 0x356 <main+0x18>

00000388 <__tablejump2__>:
 388:	ee 0f       	add	r30, r30
 38a:	ff 1f       	adc	r31, r31
 38c:	05 90       	lpm	r0, Z+
 38e:	f4 91       	lpm	r31, Z
 390:	e0 2d       	mov	r30, r0
 392:	09 94       	ijmp

00000394 <itoa>:
 394:	45 32       	cpi	r20, 0x25	; 37
 396:	51 05       	cpc	r21, r1
 398:	20 f4       	brcc	.+8      	; 0x3a2 <itoa+0xe>
 39a:	42 30       	cpi	r20, 0x02	; 2
 39c:	10 f0       	brcs	.+4      	; 0x3a2 <itoa+0xe>
 39e:	0c 94 d5 01 	jmp	0x3aa	; 0x3aa <__itoa_ncheck>
 3a2:	fb 01       	movw	r30, r22
 3a4:	10 82       	st	Z, r1
 3a6:	cb 01       	movw	r24, r22
 3a8:	08 95       	ret

000003aa <__itoa_ncheck>:
 3aa:	bb 27       	eor	r27, r27
 3ac:	4a 30       	cpi	r20, 0x0A	; 10
 3ae:	31 f4       	brne	.+12     	; 0x3bc <__itoa_ncheck+0x12>
 3b0:	99 23       	and	r25, r25
 3b2:	22 f4       	brpl	.+8      	; 0x3bc <__itoa_ncheck+0x12>
 3b4:	bd e2       	ldi	r27, 0x2D	; 45
 3b6:	90 95       	com	r25
 3b8:	81 95       	neg	r24
 3ba:	9f 4f       	sbci	r25, 0xFF	; 255
 3bc:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__utoa_common>

000003c0 <__utoa_ncheck>:
 3c0:	bb 27       	eor	r27, r27

000003c2 <__utoa_common>:
 3c2:	fb 01       	movw	r30, r22
 3c4:	55 27       	eor	r21, r21
 3c6:	aa 27       	eor	r26, r26
 3c8:	88 0f       	add	r24, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	aa 1f       	adc	r26, r26
 3ce:	a4 17       	cp	r26, r20
 3d0:	10 f0       	brcs	.+4      	; 0x3d6 <__utoa_common+0x14>
 3d2:	a4 1b       	sub	r26, r20
 3d4:	83 95       	inc	r24
 3d6:	50 51       	subi	r21, 0x10	; 16
 3d8:	b9 f7       	brne	.-18     	; 0x3c8 <__utoa_common+0x6>
 3da:	a0 5d       	subi	r26, 0xD0	; 208
 3dc:	aa 33       	cpi	r26, 0x3A	; 58
 3de:	08 f0       	brcs	.+2      	; 0x3e2 <__utoa_common+0x20>
 3e0:	a9 5d       	subi	r26, 0xD9	; 217
 3e2:	a1 93       	st	Z+, r26
 3e4:	00 97       	sbiw	r24, 0x00	; 0
 3e6:	79 f7       	brne	.-34     	; 0x3c6 <__utoa_common+0x4>
 3e8:	b1 11       	cpse	r27, r1
 3ea:	b1 93       	st	Z+, r27
 3ec:	11 92       	st	Z+, r1
 3ee:	cb 01       	movw	r24, r22
 3f0:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <strrev>

000003f4 <strrev>:
 3f4:	dc 01       	movw	r26, r24
 3f6:	fc 01       	movw	r30, r24
 3f8:	67 2f       	mov	r22, r23
 3fa:	71 91       	ld	r23, Z+
 3fc:	77 23       	and	r23, r23
 3fe:	e1 f7       	brne	.-8      	; 0x3f8 <strrev+0x4>
 400:	32 97       	sbiw	r30, 0x02	; 2
 402:	04 c0       	rjmp	.+8      	; 0x40c <__DATA_REGION_LENGTH__+0xc>
 404:	7c 91       	ld	r23, X
 406:	6d 93       	st	X+, r22
 408:	70 83       	st	Z, r23
 40a:	62 91       	ld	r22, -Z
 40c:	ae 17       	cp	r26, r30
 40e:	bf 07       	cpc	r27, r31
 410:	c8 f3       	brcs	.-14     	; 0x404 <__DATA_REGION_LENGTH__+0x4>
 412:	08 95       	ret

00000414 <_exit>:
 414:	f8 94       	cli

00000416 <__stop_program>:
 416:	ff cf       	rjmp	.-2      	; 0x416 <__stop_program>
