
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000118  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000070a  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000601  00000000  00000000  000008b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b6  00000000  00000000  00000eb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001170  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000371  00000000  00000000  000011a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000138  00000000  00000000  00001515  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000164d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Timer0_PWM_Init>:
#include <avr/io.h>
#include <util/delay.h>

void Timer0_PWM_Init(unsigned char duty_cycle){

	TCNT0 = 0; // Timer initial value
  6c:	12 be       	out	0x32, r1	; 50

	OCR0  = duty_cycle; //compare value
  6e:	8c bf       	out	0x3c, r24	; 60

	DDRB  = DDRB | (1<<PB3); //set OC0 as output pin --> pin where the PWM signal is generated from MC
  70:	87 b3       	in	r24, 0x17	; 23
  72:	88 60       	ori	r24, 0x08	; 8
  74:	87 bb       	out	0x17, r24	; 23
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
  76:	8a e6       	ldi	r24, 0x6A	; 106
  78:	83 bf       	out	0x33, r24	; 51
  7a:	08 95       	ret

0000007c <main>:
int main(void)
{
	unsigned char duty;
	while(1)
	{
		for(duty = 0 ; duty < 255 ; duty++)
  7c:	c0 e0       	ldi	r28, 0x00	; 0
  7e:	0a c0       	rjmp	.+20     	; 0x94 <main+0x18>
		{
			/*increase the LED light intensity*/
			Timer0_PWM_Init(duty);
  80:	8c 2f       	mov	r24, r28
  82:	0e 94 36 00 	call	0x6c	; 0x6c <Timer0_PWM_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  86:	83 ec       	ldi	r24, 0xC3	; 195
  88:	99 e0       	ldi	r25, 0x09	; 9
  8a:	01 97       	sbiw	r24, 0x01	; 1
  8c:	f1 f7       	brne	.-4      	; 0x8a <main+0xe>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <main+0x14>
  90:	00 00       	nop
int main(void)
{
	unsigned char duty;
	while(1)
	{
		for(duty = 0 ; duty < 255 ; duty++)
  92:	cf 5f       	subi	r28, 0xFF	; 255
  94:	cf 3f       	cpi	r28, 0xFF	; 255
  96:	a1 f7       	brne	.-24     	; 0x80 <main+0x4>
  98:	87 ea       	ldi	r24, 0xA7	; 167
  9a:	91 e6       	ldi	r25, 0x61	; 97
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <main+0x20>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <main+0x26>
  a2:	00 00       	nop
			/*increase the LED light intensity*/
			Timer0_PWM_Init(duty);
			_delay_ms(10);
		}
		_delay_ms(100);
		for(duty = 255 ; duty > 0 ; duty--)
  a4:	0a c0       	rjmp	.+20     	; 0xba <main+0x3e>
		{
			/*decrease the LED light intensity*/
			Timer0_PWM_Init(duty);
  a6:	8c 2f       	mov	r24, r28
  a8:	0e 94 36 00 	call	0x6c	; 0x6c <Timer0_PWM_Init>
  ac:	83 ec       	ldi	r24, 0xC3	; 195
  ae:	99 e0       	ldi	r25, 0x09	; 9
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <main+0x34>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x3a>
  b6:	00 00       	nop
			/*increase the LED light intensity*/
			Timer0_PWM_Init(duty);
			_delay_ms(10);
		}
		_delay_ms(100);
		for(duty = 255 ; duty > 0 ; duty--)
  b8:	c1 50       	subi	r28, 0x01	; 1
  ba:	c1 11       	cpse	r28, r1
  bc:	f4 cf       	rjmp	.-24     	; 0xa6 <main+0x2a>
  be:	de cf       	rjmp	.-68     	; 0x7c <main>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>
